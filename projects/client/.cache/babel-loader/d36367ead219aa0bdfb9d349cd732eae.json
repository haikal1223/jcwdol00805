{"ast":null,"code":"import { keyframes } from './keyframes.mjs';\nimport { spring } from './spring.mjs';\nimport { decay } from './decay.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nconst types = {\n  decay,\n  keyframes: keyframes,\n  tween: keyframes,\n  spring\n};\n\nfunction loopElapsed(elapsed, duration) {\n  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return elapsed - duration - delay;\n}\n\nfunction reverseElapsed(elapsed) {\n  let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let isForwardPlayback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;\n}\n\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n  return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\n\nconst framesync = update => {\n  const passTimestamp = _ref => {\n    let {\n      delta\n    } = _ref;\n    return update(delta);\n  };\n\n  return {\n    start: () => sync.update(passTimestamp, true),\n    stop: () => cancelSync.update(passTimestamp)\n  };\n};\n\nfunction animateValue(_ref2) {\n  let {\n    duration,\n    driver = framesync,\n    elapsed = 0,\n    repeat: repeatMax = 0,\n    repeatType = \"loop\",\n    repeatDelay = 0,\n    keyframes: keyframes$1,\n    autoplay = true,\n    onPlay,\n    onStop,\n    onComplete,\n    onRepeat,\n    onUpdate,\n    type = \"keyframes\",\n    ...options\n  } = _ref2;\n  const initialElapsed = elapsed;\n  let driverControls;\n  let repeatCount = 0;\n  let computedDuration = duration;\n  let isComplete = false;\n  let isForwardPlayback = true;\n  let interpolateFromNumber;\n  const animator = types[keyframes$1.length > 2 ? \"keyframes\" : type] || keyframes;\n  const origin = keyframes$1[0];\n  const target = keyframes$1[keyframes$1.length - 1];\n  let state = {\n    done: false,\n    value: origin\n  };\n  /**\n   * If this value needs interpolation (ie is non-numerical), set up an interpolator.\n   * TODO: Keyframes animation also performs this step. This could be removed so it only happens here.\n   */\n\n  const {\n    needsInterpolation\n  } = animator;\n\n  if (needsInterpolation && needsInterpolation(origin, target)) {\n    interpolateFromNumber = interpolate([0, 100], [origin, target], {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n\n  const animation = animator({ ...options,\n    duration,\n    keyframes: keyframes$1\n  });\n\n  function repeat() {\n    repeatCount++;\n\n    if (repeatType === \"reverse\") {\n      isForwardPlayback = repeatCount % 2 === 0;\n      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n    } else {\n      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n      if (repeatType === \"mirror\") animation.flipTarget();\n    }\n\n    isComplete = false;\n    onRepeat && onRepeat();\n  }\n\n  function complete() {\n    driverControls && driverControls.stop();\n    onComplete && onComplete();\n  }\n\n  function update(delta) {\n    if (!isForwardPlayback) delta = -delta;\n    elapsed += delta;\n\n    if (!isComplete) {\n      state = animation.next(Math.max(0, elapsed));\n      if (interpolateFromNumber) state.value = interpolateFromNumber(state.value);\n      isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n    }\n\n    onUpdate && onUpdate(state.value);\n\n    if (isComplete) {\n      if (repeatCount === 0) {\n        computedDuration = computedDuration !== undefined ? computedDuration : elapsed;\n      }\n\n      if (repeatCount < repeatMax) {\n        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n      } else {\n        complete();\n      }\n    }\n  }\n\n  function play() {\n    onPlay && onPlay();\n    driverControls = driver(update);\n    driverControls.start();\n  }\n\n  autoplay && play();\n  return {\n    stop: () => {\n      onStop && onStop();\n      driverControls && driverControls.stop();\n    },\n\n    /**\n     * Set the current time of the animation. This is purposefully\n     * mirroring the WAAPI animation API to make them interchanagable.\n     * Going forward this file should be ported more towards\n     * https://github.com/motiondivision/motionone/blob/main/packages/animation/src/Animation.ts\n     * Which behaviourally adheres to WAAPI as far as possible.\n     *\n     * WARNING: This is not safe to use for most animations. We currently\n     * only use it for handoff from WAAPI within Framer.\n     *\n     * This animation function consumes time every frame rather than being sampled for time.\n     * So the sample() method performs some headless frames to ensure\n     * repeats are handled correctly. Ideally in the future we will replace\n     * that method with this, once repeat calculations are pure.\n     */\n    set currentTime(t) {\n      elapsed = initialElapsed;\n      update(t);\n    },\n\n    /**\n     * animate() can't yet be sampled for time, instead it\n     * consumes time. So to sample it we have to run a low\n     * temporal-resolution version.\n     *\n     * isControlled should be set to true if sample is being run within\n     * a loop. This indicates that we're not arbitrarily sampling\n     * the animation but running it one step after another. Therefore\n     * we don't need to run a low-res version here. This is a stop-gap\n     * until a rewrite can sample for time.\n     */\n    sample: function (t) {\n      let isControlled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      elapsed = initialElapsed;\n\n      if (isControlled) {\n        update(t);\n        return state;\n      }\n\n      const sampleResolution = duration && typeof duration === \"number\" ? Math.max(duration * 0.5, 50) : 50;\n      let sampleElapsed = 0;\n      update(0);\n\n      while (sampleElapsed <= t) {\n        const remaining = t - sampleElapsed;\n        update(Math.min(remaining, sampleResolution));\n        sampleElapsed += sampleResolution;\n      }\n\n      return state;\n    }\n  };\n}\n\nexport { animateValue, hasRepeatDelayElapsed, loopElapsed, reverseElapsed };","map":{"version":3,"names":["keyframes","spring","decay","sync","cancelSync","interpolate","types","tween","loopElapsed","elapsed","duration","delay","reverseElapsed","isForwardPlayback","hasRepeatDelayElapsed","framesync","update","passTimestamp","delta","start","stop","animateValue","driver","repeat","repeatMax","repeatType","repeatDelay","keyframes$1","autoplay","onPlay","onStop","onComplete","onRepeat","onUpdate","type","options","initialElapsed","driverControls","repeatCount","computedDuration","isComplete","interpolateFromNumber","animator","length","origin","target","state","done","value","needsInterpolation","clamp","animation","flipTarget","complete","next","Math","max","undefined","play","currentTime","t","sample","isControlled","sampleResolution","sampleElapsed","remaining","min"],"sources":["C:/Users/barsm/Desktop/jcwdol00805/node_modules/framer-motion/dist/es/animation/legacy-popmotion/index.mjs"],"sourcesContent":["import { keyframes } from './keyframes.mjs';\nimport { spring } from './spring.mjs';\nimport { decay } from './decay.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\n\nconst types = {\n    decay,\n    keyframes: keyframes,\n    tween: keyframes,\n    spring,\n};\nfunction loopElapsed(elapsed, duration, delay = 0) {\n    return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration = 0, delay = 0, isForwardPlayback = true) {\n    return isForwardPlayback\n        ? loopElapsed(duration + -elapsed, duration, delay)\n        : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\nconst framesync = (update) => {\n    const passTimestamp = ({ delta }) => update(delta);\n    return {\n        start: () => sync.update(passTimestamp, true),\n        stop: () => cancelSync.update(passTimestamp),\n    };\n};\nfunction animateValue({ duration, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = \"loop\", repeatDelay = 0, keyframes: keyframes$1, autoplay = true, onPlay, onStop, onComplete, onRepeat, onUpdate, type = \"keyframes\", ...options }) {\n    const initialElapsed = elapsed;\n    let driverControls;\n    let repeatCount = 0;\n    let computedDuration = duration;\n    let isComplete = false;\n    let isForwardPlayback = true;\n    let interpolateFromNumber;\n    const animator = types[keyframes$1.length > 2 ? \"keyframes\" : type] || keyframes;\n    const origin = keyframes$1[0];\n    const target = keyframes$1[keyframes$1.length - 1];\n    let state = { done: false, value: origin };\n    /**\n     * If this value needs interpolation (ie is non-numerical), set up an interpolator.\n     * TODO: Keyframes animation also performs this step. This could be removed so it only happens here.\n     */\n    const { needsInterpolation } = animator;\n    if (needsInterpolation && needsInterpolation(origin, target)) {\n        interpolateFromNumber = interpolate([0, 100], [origin, target], {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const animation = animator({\n        ...options,\n        duration,\n        keyframes: keyframes$1,\n    });\n    function repeat() {\n        repeatCount++;\n        if (repeatType === \"reverse\") {\n            isForwardPlayback = repeatCount % 2 === 0;\n            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n        }\n        else {\n            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n            if (repeatType === \"mirror\")\n                animation.flipTarget();\n        }\n        isComplete = false;\n        onRepeat && onRepeat();\n    }\n    function complete() {\n        driverControls && driverControls.stop();\n        onComplete && onComplete();\n    }\n    function update(delta) {\n        if (!isForwardPlayback)\n            delta = -delta;\n        elapsed += delta;\n        if (!isComplete) {\n            state = animation.next(Math.max(0, elapsed));\n            if (interpolateFromNumber)\n                state.value = interpolateFromNumber(state.value);\n            isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n        }\n        onUpdate && onUpdate(state.value);\n        if (isComplete) {\n            if (repeatCount === 0) {\n                computedDuration =\n                    computedDuration !== undefined ? computedDuration : elapsed;\n            }\n            if (repeatCount < repeatMax) {\n                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n            }\n            else {\n                complete();\n            }\n        }\n    }\n    function play() {\n        onPlay && onPlay();\n        driverControls = driver(update);\n        driverControls.start();\n    }\n    autoplay && play();\n    return {\n        stop: () => {\n            onStop && onStop();\n            driverControls && driverControls.stop();\n        },\n        /**\n         * Set the current time of the animation. This is purposefully\n         * mirroring the WAAPI animation API to make them interchanagable.\n         * Going forward this file should be ported more towards\n         * https://github.com/motiondivision/motionone/blob/main/packages/animation/src/Animation.ts\n         * Which behaviourally adheres to WAAPI as far as possible.\n         *\n         * WARNING: This is not safe to use for most animations. We currently\n         * only use it for handoff from WAAPI within Framer.\n         *\n         * This animation function consumes time every frame rather than being sampled for time.\n         * So the sample() method performs some headless frames to ensure\n         * repeats are handled correctly. Ideally in the future we will replace\n         * that method with this, once repeat calculations are pure.\n         */\n        set currentTime(t) {\n            elapsed = initialElapsed;\n            update(t);\n        },\n        /**\n         * animate() can't yet be sampled for time, instead it\n         * consumes time. So to sample it we have to run a low\n         * temporal-resolution version.\n         *\n         * isControlled should be set to true if sample is being run within\n         * a loop. This indicates that we're not arbitrarily sampling\n         * the animation but running it one step after another. Therefore\n         * we don't need to run a low-res version here. This is a stop-gap\n         * until a rewrite can sample for time.\n         */\n        sample: (t, isControlled = false) => {\n            elapsed = initialElapsed;\n            if (isControlled) {\n                update(t);\n                return state;\n            }\n            const sampleResolution = duration && typeof duration === \"number\"\n                ? Math.max(duration * 0.5, 50)\n                : 50;\n            let sampleElapsed = 0;\n            update(0);\n            while (sampleElapsed <= t) {\n                const remaining = t - sampleElapsed;\n                update(Math.min(remaining, sampleResolution));\n                sampleElapsed += sampleResolution;\n            }\n            return state;\n        },\n    };\n}\n\nexport { animateValue, hasRepeatDelayElapsed, loopElapsed, reverseElapsed };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}